
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  role            UserRole  @default(USER)
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  favoriteIds     String[]  @db.ObjectId

  accounts        Account[]
  listings        Listing[]
  reviews         Review[]
  bookings        Booking[]
  favorites       Favorite[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String
  expire     String

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  imageSrc           String[]
  category           String
  activityType       String
  duration           Int
  difficulty         String
  minParticipants    Int
  maxParticipants    Int
  ageRestriction     Int?
  equipment          String[]
  locationName       String
  locationAddress    String
  latitude           Float
  longitude          Float
  price              Float
  currency           String   @default("EUR")
  isInstantBook      Boolean  @default(false)
  cancellationPolicy String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  viewCount          Int      @default(0) 
  bookingCount       Int      @default(0) 
  reviewCount        Int      @default(0) 
  reviewAverage      Float    @default(0.0) 
  userId             String   @db.ObjectId

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]
  reviews  Review[] 

  Favorite Favorite[]
}

model Booking {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("pending") // Ajoutez cette ligne

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

