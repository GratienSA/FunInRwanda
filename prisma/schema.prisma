// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://gratien:gratien@cluster0.5wvsl.mongodb.net/FunInRwanda"
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  favoriteIds     String[]  @db.ObjectId

  accounts        Account[]
  listings        Listing[]
  reviews         Review[]
  bookings        Booking[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  imageSrc           String[]
  category           String
  activityType       String
  duration           Int
  difficulty         String
  minParticipants    Int
  maxParticipants    Int
  ageRestriction     String?
  equipment          String[]
  locationName       String
  locationAddress    String
  latitude           Float
  longitude          Float
  price              Float
  currency           String   @default("EUR")
  isInstantBook      Boolean  @default(false)
  cancellationPolicy String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @db.ObjectId

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]
  reviews  Review[]
}

model Booking {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}